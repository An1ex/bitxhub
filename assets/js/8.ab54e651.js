(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{353:function(s,a,e){"use strict";e.r(a);var t=e(42),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"共识算法插件化设计文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#共识算法插件化设计文档"}},[s._v("#")]),s._v(" 共识算法插件化设计文档")]),s._v(" "),e("h2",{attrs:{id:"_1-项目结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-项目结构"}},[s._v("#")]),s._v(" 1. 项目结构")]),s._v(" "),e("p",[s._v("该项目为BitXHub提供共识算法的插件化，具体项目结构如下：")]),s._v(" "),e("div",{staticClass:"language-none extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\n./\n├── Makefile //编译文件\n├── README.md\n├── build\n│   └── consensus.so //编译后的共识算法二进制插件\n├── go.mod\n├── go.sum\n├── order.toml //共识配置文件\n└── consensus //共识算法项目代码\n    ├── config.go\n    ├── node.go\n    └── stack.go\n")])])]),e("p",[s._v("其中注意在"),e("code",[s._v("go.mod")]),s._v("中需要引用BitXHub项目源码，需要让该插件项目与BitXHub在同一目录下（建议在$GOPATH路径下）。")]),s._v(" "),e("div",{staticClass:"language-none extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("replace github.com/meshplus/bitxhub => ../bitxhub/\n")])])]),e("h2",{attrs:{id:"_2-编译plugin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-编译plugin"}},[s._v("#")]),s._v(" 2. 编译Plugin")]),s._v(" "),e("p",[s._v("我们采用GO语言提供的插件模式，实现"),e("code",[s._v("BitXHub")]),s._v("对于Plugin的动态加载。")]),s._v(" "),e("p",[s._v("编写"),e("code",[s._v("Makefile")]),s._v("编译文件：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("SHELL")]),s._v(" :"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" /bin/bash\nCURRENT_PATH "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("shell "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\nGO  "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("GO111MODULE")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("on go\nplugin:\n   @mkdir -p build\n   "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("GO"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(" build --buildmode"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("plugin -o build/consensus.so consensus/*.go\n")])])]),e("p",[s._v("运行下面的命令，能够得到 "),e("code",[s._v("consensus.so")]),s._v("文件。")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" plugin\n")])])]),e("p",[s._v("修改节点的"),e("code",[s._v("bitxhub.toml")])]),s._v(" "),e("div",{staticClass:"language-none extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('[order]\n  plugin = "plugins/consensus.so"\n')])])]),e("p",[s._v("将你编写的动态链接文件和"),e("code",[s._v("order.toml")]),s._v("文件，分别放到节点的plugins文件夹和配置文件下。")]),s._v(" "),e("div",{staticClass:"language-none extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("./\n├── api\n├── bitxhub.toml\n├── certs \n│   ├── agency.cert\n│   ├── ca.cert\n│   ├── node.cert\n│   └── node.priv\n├── key.json \n├── logs\n├── network.toml\n├── order.toml //共识算法配置文件\n├── plugins\n│   ├── consensus.so //共识算法插件\n├── start.sh\n└── storage\n")])])]),e("p",[s._v("结合我们提供的"),e("code",[s._v("BitXHub")]),s._v("中继链，就能接入到跨链平台来。")])])}),[],!1,null,null,null);a.default=n.exports}}]);